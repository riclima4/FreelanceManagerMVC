@inject IProjectsService ProjectsService
@inject ITarefasService TarefasService
@inject AuthenticationStateProvider AuthStateProvider


@page "/home"
@using System.Globalization
@using System.Security.Claims
@using FreelanceManager.Data.Enum
@using FreelanceManager.IO.Projects
@using FreelanceManager.IO.Tarefas
@using FreelanceManager.Services.Projects
@using FreelanceManager.Services.Tarefas
@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor
@using Syncfusion.Blazor.ProgressBar

@rendermode InteractiveServer
@attribute [Authorize]


<PageTitle>FreelanceManager - Painel</PageTitle>

<div class="dashboard-container">
    <div class="welcome-card">
        <div class="welcome-content">
            <div class="welcome-text">
                <h1>Bem-vindo de volta, @nome!</h1>
            </div>
            <div class="date-display">
                <div class="current-date">@DateTime.Now.ToString("dddd, d 'de' MMMM 'de' yyyy", new CultureInfo("pt-PT"))</div>
            </div>
        </div>
    </div>

    <div class="stats-container">
        <div class="stat-card active-projects">
            <div class="stat-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>
            </div>
            <div class="stat-details">
                <div class="stat-title">Projetos Ativos</div>
                <div class="stat-value">@activeProjects</div>
                <div class="stat-trend positive">
                    <span class="trend-arrow">↑</span> 2 em relação ao mês passado
                </div>
            </div>
        </div>

        <div class="stat-card hours-tracked">
            <div class="stat-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>
            </div>
            <div class="stat-details">
                <div class="stat-title">Horas Registadas</div>
                <div class="stat-value">@hoursTracked</div>
                <div class="stat-trend positive">
                    <span class="trend-arrow">↑</span> 12 em relação ao mês passado
                </div>
            </div>
        </div>

        <div class="stat-card invoices">
            <div class="stat-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect><line x1="1" y1="10" x2="23" y2="10"></line></svg>
            </div>
            <div class="stat-details">
                <div class="stat-title">Faturas Pendentes</div>
                <div class="stat-value">@pendingInvoices</div>
                <div class="stat-trend negative">
                    <span class="trend-arrow">↓</span> 2 em relação ao mês passado
                </div>
            </div>
        </div>

        <div class="stat-card earnings">
            <div class="stat-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>
            </div>
            <div class="stat-details">
                <div class="stat-title">Ganhos Totais</div>
                <div class="stat-value">@totalEarnings.ToString("C", new CultureInfo("pt-PT"))</div>
                <div class="stat-trend positive">
                    <span class="trend-arrow">↑</span> €1.250 em relação ao mês passado
                </div>
            </div>
        </div>
    </div>

    <div class="dashboard-panels">
        <div class="left-panels">
            <div class="side-section tasks-section">
                <div class="section-header">
                    <h2>Tarefas Em Andamento</h2>
                    <button class="add-task-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                    </button>
                </div>
                <div class="task-list">
                    @if (inProgressTasks.Count > 0)
                    {
                        @foreach (var task in inProgressTasks)
                        {
                            <div class="task-item">
                                <div class="task-content">
                                    <div class="task-title">@task.Name</div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-tasks">
                            <p>Nenhuma tarefa em andamento</p>
                        </div>
                    }
                </div>
                <div class="view-all-container">
                    <a href="projects" class="view-all-link">Ver todas as tarefas</a>
                </div>
            </div>

            <div class="projects-section">
                <div class="section-header">
                    <h2>Projetos Ativos</h2>
                </div>
                <div class="projects-grid">
                    @foreach (var project in projects)
                    {
                        <div class="project-card">
                            <div class="project-header">
                                <div class="project-avatar" style="background-color:#7F56D9 ">
                                    @project.Name.Substring(0, 1)
                                </div>
                                <div class="project-main">
                                    <div class="project-name">@project.Name</div>
                                    <div class="project-client">@(project.Client?.Name ?? "No Client")</div>                                
                                    </div>
                            </div>
                            <div class="project-progress">
                                <div class="progress-info">
                                    <span>@GetProjectProgress(project)%</span>
                                </div>
                                
                                <SfProgressBar Type="ProgressType.Linear" Value="GetProjectProgress(project)" Height="10" Width="99%" TrackColor="#e8e3f3"
                                                InnerRadius="100%" ProgressColor="#7f56d9" TrackThickness="24" CornerRadius="CornerType.Round"
                                               ProgressThickness="18" Minimum="0" Maximum="100">
                                </SfProgressBar>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="right-panels">
            <!-- Project Invites Card -->
            <div class="side-section invites-section">
                <div class="section-header">
                    <h2>Convites para Projetos</h2>
                    <span class="invite-count">@projectInvites.Count</span>
                </div>
                <div class="invites-list">
                    @foreach (var invite in projectInvites)
                    {
                        <div class="invite-item">
                            <div class="invite-avatar">
                                @invite.ProjectName.Substring(0, 1)
                            </div>
                            <div class="invite-content">
                                <div class="invite-title">@invite.ProjectName</div>
                                <div class="invite-from">De: @invite.FromName</div>
                            </div>
                            <div class="invite-actions">
                                <button class="accept-btn" @onclick="() => HandleInvite(invite.Id, true)" title="Aceitar">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>
                                </button>
                                <button class="reject-btn" @onclick="() => HandleInvite(invite.Id, false)" title="Recusar">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                                </button>
                            </div>
                        </div>
                    }
                    @if (projectInvites.Count == 0)
                    {
                        <div class="no-invites">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21.5 12H16c-.7 2-2 3-4 3s-3.3-1-4-3H2.5"></path><path d="M5.5 5.1L2 12v6c0 1.1.9 2 2 2h16a2 2 0 002-2v-6l-3.4-6.9A2 2 0 0016.8 4H7.2a2 2 0 00-1.8 1.1z"></path></svg>
                            <p>Sem convites pendentes</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Team Members Card -->
            <div class="side-section members-section">
                <div class="section-header">
                    <h2>Membros da Equipa</h2>
                    <button class="invite-member-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="23" y1="11" x2="17" y2="11"></line></svg>
                        Convidar
                    </button>
                </div>
                <div class="members-list">
                    @foreach (var member in teamMembers)
                    {
                        <div class="member-item">
                            <div class="member-avatar @(member.IsOnline ? "online" : "")">
                                @if (string.IsNullOrEmpty(member.AvatarUrl))
                                {
                                    <div class="avatar-placeholder">@member.Name.Substring(0, 1)</div>
                                }
                                else
                                {
                                    <img src="@member.AvatarUrl" alt="@member.Name" />
                                }
                            </div>
                            <div class="member-info">
                                <div class="member-name">@member.Name</div>
                                <div class="member-role">@member.Role</div>
                            </div>
                            <div class="member-projects">@member.ProjectsCount projetos</div>
                        </div>
                    }
                </div>
                <div class="view-all-container">
                    <a href="members" class="view-all-link">Ver todos os membros</a>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string userId;
    private string nome;
    private List<ProjectDto> projects = new List<ProjectDto>();
    private List<TarefaDto> inProgressTasks = new List<TarefaDto>();
    
    protected override async Task OnInitializedAsync()
    {
        await GetSessionUserId();
        await GetUserProjects();
        await GetInProgressTasks();
        UpdateDashboardStats();
    }
    
    public async Task GetSessionUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
        nome = user.FindFirst(ClaimTypes.Name).Value;
    }
    
    private async Task GetUserProjects()
    {
        projects = await ProjectsService.GetByUserIdAsync(userId);
    }

    private async Task GetInProgressTasks()
    {
        var allTasks = await TarefasService.GetPersonalByApplicationUserIdAsync(userId);
        
        inProgressTasks = allTasks.Where(t => t.Status == TarefaStatus.InProgress).ToList();
    }

    private void UpdateDashboardStats()
    {
        activeProjects = projects.Count(p => p.Status == ProjectStatus.InProgress);
        
    }

 
    // Dashboard data
    private int activeProjects = 0;
    private int hoursTracked = 87;
    private int pendingInvoices = 3;
    private decimal totalEarnings = 5280.50m;

    // Project Invites data
    private List<ProjectInvite> projectInvites = new List<ProjectInvite>
    {
        new ProjectInvite { Id = 1, ProjectName = "Campanha de Marketing", FromName = "João Silva", FromEmail = "joao@exemplo.com" },
        new ProjectInvite { Id = 2, ProjectName = "Sistema de Design UI", FromName = "Sara Pereira", FromEmail = "sara@exemplo.com" },
    };

    // Team Members data
    private List<TeamMember> teamMembers = new List<TeamMember>
    {
        new TeamMember { Id = 1, Name = "Alexandre Fernandes", Role = "Designer UI", IsOnline = true, ProjectsCount = 3 },
        new TeamMember { Id = 2, Name = "Maria Santos", Role = "Desenvolvedora", IsOnline = false, ProjectsCount = 5 },
        new TeamMember { Id = 3, Name = "David Costa", Role = "Gestor de Projeto", IsOnline = true, ProjectsCount = 7 }
    };

    // Handle invite accept/reject
    private void HandleInvite(int inviteId, bool accept)
    {
        var invite = projectInvites.FirstOrDefault(i => i.Id == inviteId);
        if (invite != null)
        {
            projectInvites.Remove(invite);
            StateHasChanged();
        }
    }

    public class ProjectInvite
    {
        public int Id { get; set; }
        public string ProjectName { get; set; } = string.Empty;
        public string FromName { get; set; } = string.Empty;
        public string FromEmail { get; set; } = string.Empty;
    }

    public class TeamMember
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public string AvatarUrl { get; set; } = string.Empty;
        public bool IsOnline { get; set; }
        public int ProjectsCount { get; set; }
    }

    private int GetProjectProgress(ProjectDto project)
    {
        if (project?.Tarefas == null || !project.Tarefas.Any())
        {
            return 0;
        }
    
        int totalTasks = project.Tarefas.Count();
        int completedTasks = project.Tarefas.Count(t => t.Status == TarefaStatus.Completed);
        return (int)Math.Round((double)completedTasks / totalTasks * 100);
    }
}