@page "/ProjectPage"
@inject AuthenticationStateProvider AuthStateProvider
@inject IProjectsService ProjectsService
@inject ITarefasService TarefasService
@inject IUtilsService UtilsService
@using System.Security.Claims
@using FreelanceManager.Data.Enum
@using FreelanceManager.IO.Projects
@using FreelanceManager.IO.Tarefas
@using FreelanceManager.Services.Projects
@using FreelanceManager.Services.Utils
@using FreelanceManager.Services.Tarefas;
@using Microsoft.AspNetCore.Authorization

@rendermode InteractiveServer
@attribute [Authorize]

<h3>ProjectPage</h3>

<SfKanban @ref="KanbanObj" TValue="TarefaDto" KeyField="StatusDescription" DataSource="_tarefas">
    <KanbanColumns>
        <KanbanColumn HeaderText="To Do" KeyField="@(new List<string>() { "Created" })"></KanbanColumn>
        <KanbanColumn HeaderText="In Progress" KeyField="@(new List<string>() { "InProgress" })">
        </KanbanColumn>
        <KanbanColumn HeaderText="On Hold" KeyField="@(new List<string>() { "OnHold" })"></KanbanColumn>
        <KanbanColumn HeaderText="Completed" KeyField="@(new List<string>() { "Completed" })">
        </KanbanColumn>
    </KanbanColumns>
    <KanbanCardSettings HeaderField="Name" ContentField="Description" />
    <KanbanSwimlaneSettings KeyField="AssociatedUserId" TextField="AssociatedUser.FullName"
        AllowDragAndDrop="@_allowDragAndDrop" ShowEmptyRow="true"></KanbanSwimlaneSettings>
    <KanbanEvents TValue="TarefaDto" ActionComplete="OnKanbanActionComplete" DragStart="@DragStartHandler">
    </KanbanEvents>
</SfKanban>

<SfToast ID="ProjectPageId" @ref="ToastObj">
    <ToastPosition X="Center"></ToastPosition>
</SfToast>
@* <p>
    @foreach (var t in _tarefas)
    {
        <span>@_tarefas.Count</span>

        <br />
        <span>@t.AssociatedUserId</span>

        <br />
    }
</p> *@

@code {
    SfToast ToastObj;
    SfKanban<TarefaDto> KanbanObj;
    private bool _allowDragAndDrop;
    private List<TarefaDto> _tarefas = new List<TarefaDto>();
    private string userId;

    [SupplyParameterFromQuery]
    private Guid ProjectId { get; set; }
    private bool _isInitialized = false;

    protected override Task OnInitializedAsync() => Task.CompletedTask;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _isInitialized = true;
            await GetSessionUserId();
            await IsOwner();
            await LoadTarefasByProjectId(ProjectId);

            StateHasChanged();
        }
    }

    public void DragStartHandler(DragEventArgs<TarefaDto> args)
    {
        var data = args.Data[0];
        if (!userId.Equals(data.AssociatedUserId) && !userId.Equals(data.ApplicationUserId))
        {
            args.Cancel = true;
            UtilsService.ShowErrorToast(ToastObj, "You can only drag your own tasks.");
        }
    }

    private async Task LoadProjectUsers()
    {
        List<ProjectUserDto> projectUsers = await ProjectsService.GetProjectUsersAsync(ProjectId);
        foreach (ProjectUserDto user in projectUsers)
        {
            TarefaDto tarefa = new TarefaDto
            {
                Id = Guid.NewGuid(),
                Name = "",
                Description = "",
                AssociatedUserId = user.ApplicationUserId,
                Status = TarefaStatus.Placeholder,
                StatusDescription = TarefaStatus.Placeholder.ToString(),
                StartDate = DateTime.Now,
                EndDate = DateTime.Now,
                Notes = "",
                AssociatedUser = user.ApplicationUser,
                ApplicationUserId = user.ApplicationUserId,
            };

            _tarefas.Add(tarefa);
        }
    }
    private async Task IsOwner()
    {
        var isOwner = await ProjectsService.GetByIdAsync(ProjectId);
        if (userId.Equals(isOwner.ApplicationUserId))
        {
            _allowDragAndDrop = true;
        }
        else
        {
            _allowDragAndDrop = false;
        }
    }
    private async Task GetSessionUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
    }
    private async Task LoadTarefasByProjectId(Guid ProjectId)
    {
        var res = await ProjectsService.GetTarefasAsync(ProjectId);
        _tarefas = res;
        await LoadProjectUsers();
    }
    private async Task OnKanbanActionComplete(Syncfusion.Blazor.Kanban.ActionEventArgs<TarefaDto> args)
    {
        if (args.RequestType == "cardChange" && args.ChangedRecords?.Any() == true)
        {
            var changedRecord = args.ChangedRecords.First();
            changedRecord.Status = changedRecord.StatusDescription switch
            {
                "Created" => TarefaStatus.Created,
                "InProgress" => TarefaStatus.InProgress,
                "OnHold" => TarefaStatus.OnHold,
                "Completed" => TarefaStatus.Completed,
                _ => changedRecord.Status
            };
            TarefaModel model = new TarefaModel();
            model.AssociatedUserId = changedRecord.AssociatedUserId;
            model.Code = changedRecord.Code;
            model.Name = changedRecord.Name;
            model.Description = changedRecord.Description;
            model.StartDate = changedRecord.StartDate;
            model.EndDate = changedRecord.EndDate;
            model.Notes = changedRecord.Notes;
            model.Status = changedRecord.Status;

            var result = await TarefasService.UpdateAsync(changedRecord.Id, model);
            if (result != null)
            {
                await UtilsService.ShowSuccessToast(ToastObj, "Task updated successfully");
            }
            else
            {
                await UtilsService.ShowErrorToast(ToastObj, "Error updating task");
            }

            await LoadTarefasByProjectId(ProjectId);

            await KanbanObj.RefreshAsync();

        }
    }


}