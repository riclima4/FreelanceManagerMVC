@page "/ProjectPage"

@inject AuthenticationStateProvider AuthStateProvider
@inject IProjectsService ProjectsService
@inject ITarefasService TarefasService
@inject IUtilsService UtilsService
@inject UserManager<ApplicationUser> UserManager
@inject SfDialogService DialogService

@using System.Security.Claims
@using FreelanceManager.Data.Enum
@using FreelanceManager.IO.Projects
@using FreelanceManager.IO.Tarefas
@using FreelanceManager.Services.Projects
@using FreelanceManager.Services.Utils
@using FreelanceManager.Services.Tarefas
@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Kanban
@using Microsoft.AspNetCore.Identity
@using FreelanceManager.Data
@using Microsoft.EntityFrameworkCore

@rendermode InteractiveServer
@attribute [Authorize]
<PageTitle>ProjectPage</PageTitle>

<div class="flex flex-column gap-10 mb-16">

    <div class="flex justify-content-space-between align-items-center">
        <div class="flex gap-10 align-items-center">
            <div class="fs-24 fb-bold">@_project?.Name</div>
            <div class="statusBadge @(GetStatusClass(_project.Status).bgColorOpacity)">
                <div class="@(GetStatusClass(_project.Status).textColor) ">
                    @_project.Status
                </div>
            </div>
        </div>
        @if (isOwner)
        {
            <div class="flex gap-10">
                <SfButton CssClass="e-primary" @onclick="openInviteDialog">Invite User</SfButton>
                <SfButton CssClass="e-primary" @onclick="openCreateNewTask">New Task +</SfButton>
            </div>
        }
    </div>
    <div class="flex flex-column">
        <div class="fs-16"><span class="fb-bold">Client: </span>@(_project.ClientId == null ? "N/A" :
                        _project.Client?.Name)
        </div>
        <div class="fs-16"><span class="fb-bold">Description: </span>@_project?.Description</div>
    </div>
    <div class="flex flex-column gap-10">
        <div class="flex gap-10 align-items-center">
            <div class="fs-24 fb-bold">Members</div>
            <div class="countStyle bg-color-purple color-white fs-14">
                @_project.ProjectUsers.Count
            </div>
        </div>
        <div class="flex flex-wrap gap-10">
            @if (_project.ProjectUsers != null)
            {
                foreach (var projectUser in _project.ProjectUsers)
                {
                <div class="puBadge">
                    <span>@projectUser.ApplicationUser.FullName</span>
                    @if (isOwner && projectUser.ApplicationUserId != userId)
                    {
                        <button class="remove-member-btn" @onclick="() => RemoveMember(projectUser.ApplicationUserId)" @onclick:stopPropagation>
                            <i class="fa fa-times"></i>
                        </button>
                    }
                </div>
                }
            }
        </div>
    </div>
</div>

<SfKanban @ref="KanbanObj" TValue="TarefaDto" KeyField="StatusDescription" DataSource="_tarefas" AllowDragAndDrop="true">
    <KanbanColumns>
        <KanbanColumn HeaderText="To Do" KeyField="@(new List<string>() { "Created" })"></KanbanColumn>
        <KanbanColumn HeaderText="In Progress" KeyField="@(new List<string>() { "InProgress" })">
        </KanbanColumn>
        <KanbanColumn HeaderText="On Hold" KeyField="@(new List<string>() { "OnHold" })"></KanbanColumn>
        <KanbanColumn HeaderText="Completed" KeyField="@(new List<string>() { "Completed" })">
        </KanbanColumn>
    </KanbanColumns>
    <KanbanCardSettings HeaderField="Name" ContentField="Description">
        <Template>
            @{
                var data = (context as TarefaDto);
                <div class="kanban-card">
                    <div class="card-header "> @data.Name</div>
                    <div class="card-content">@data.Description</div>
                    @if (isOwner)
                    {
                        <div class="card-actions">
                            <button class="delete-button" @onclick="() => DeleteTask(data.Id)" @onclick:stopPropagation="true">
                                <i class="fa fa-trash"></i>
                            </button>
                        </div>
                    }
                </div>
            }
        </Template>
    </KanbanCardSettings>
    <KanbanSwimlaneSettings KeyField="AssociatedUserId" TextField="AssociatedUser.FullName"
                            AllowDragAndDrop="@_allowDragAndDrop" ShowEmptyRow="true">

    </KanbanSwimlaneSettings>
    <KanbanEvents TValue="TarefaDto" CardClick="@CardClickHandler" DialogOpen="@OnDialogOpen" ActionComplete="OnKanbanActionComplete" DragStart="@DragStartHandler">
    </KanbanEvents>
</SfKanban>
<SfDialog Target="#target" Width="400px" ShowCloseIcon="true" @bind-Visible="Visibility" 
    IsModal="true">
    <DialogTemplates>
        <Header> Create Task </Header>
        <Content>
            <EditForm Model="TarefaModel" method="post" OnValidSubmit="CreateTarefa" FormName="TarefaForm"
                class="w-100 flex flex-column gap-10" style="margin-top: 5px; !important"> 
                <DataAnnotationsValidator />
                <SfTextBox Placeholder='Name' CssClass="e-outline" @bind-Value="TarefaModel.Name" id="TarefaModel.Name"
                    FloatLabelType="FloatLabelType.Always">
                </SfTextBox>
                <SfTextBox Placeholder='Description' Type="InputType.Text" CssClass="e-outline"
                    FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.Description"
                    id="TarefaModel.Description">
                </SfTextBox>
                <SfComboBox TValue="string" TItem="ProjectUserDto" Placeholder="Associate To" CssClass="e-outline" FloatLabelType="FloatLabelType.Always"
                            DataSource="@_project.ProjectUsers"  @bind-Value="TarefaModel.AssociatedUserId"> 
                    <ComboBoxFieldSettings Value="ApplicationUserId" Text="ApplicationUserName"></ComboBoxFieldSettings>
                </SfComboBox>
                <SfTextBox Placeholder='Notes' Type="InputType.Text" CssClass="e-outline"
                           FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.Notes" id="TarefaModel.Notes">
                </SfTextBox>
                <SfNumericTextBox  CssClass="e-outline" Format="c2"  Min="0" Placeholder="Hourly Rate"
                                   Decimals="2" ValidateDecimalOnType="true"
                                   FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.HourlyRate" id="TarefaModel.HourlyRate">
                </SfNumericTextBox>
                <SfButton Type="submit" CssClass="e-primary" class="w-100">@(TarefaModel.Id == null ? "Create":"Update")</SfButton>
            </EditForm>
        </Content>
    </DialogTemplates>
</SfDialog>

<SfDialog Target="#target" Width="400px" ShowCloseIcon="true" @bind-Visible="InviteDialogVisibility" IsModal="true">
    <DialogTemplates>
        <Header>Invite User</Header>
        <Content>
            <div class="w-100 flex flex-column gap-10" style="margin-top: 5px;">
                <SfComboBox TValue="string" TItem="ApplicationUser" Placeholder="Select User" 
                           CssClass="e-outline" FloatLabelType="FloatLabelType.Always"
                           DataSource="@_availableUsers" @bind-Value="@selectedUserId">
                    <ComboBoxFieldSettings Value="Id" Text="FullName"></ComboBoxFieldSettings>
                </SfComboBox>
                <SfButton CssClass="e-primary" @onclick="InviteUser">Invite</SfButton>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

    <div>
        <SfToast ID="ProjectPageId" @ref="ToastObj">
            <ToastPosition X="Center"></ToastPosition>
        </SfToast>
    </div>
<SfDialogProvider />

@code {
    SfToast ToastObj;
    SfKanban<TarefaDto> KanbanObj;
    private bool _allowDragAndDrop;
    private List<TarefaDto> _tarefas = new List<TarefaDto>();
    private string userId;
    private bool isOwner;
    private string OldAssociatedUserId;

    private List<ApplicationUser> _availableUsers = new();
    [SupplyParameterFromQuery]
    private Guid ProjectId { get; set; }
    private bool _isInitialized = false;
    private ProjectDto _project = new ProjectDto();
    private TarefaModel TarefaModel { get; set; } = new();
    private bool createTarefaView = false;
    private bool InviteDialogVisibility { get; set; } = false;
    private string selectedUserId;


    private async Task getUsers()
    {
        _availableUsers = await UserManager.Users.ToListAsync();
        _availableUsers.RemoveAll(user => user.Id == userId);
    }
    public class colorResult
    {
        public string bgColor { get; set; }
        public string textColor { get; set; }
        public string bgColorOpacity { get; set; }

    }
    private bool Visibility { get; set; } = false;


    protected override Task OnInitializedAsync() => Task.CompletedTask;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            _isInitialized = true;
            await GetSessionUserId();
            await IsOwner();
            await LoadProjectById();
            await LoadTarefasByProjectId(ProjectId);
            await getUsers();             
            StateHasChanged();
        }
    }
    private void openCreateNewTask()
    {
        TarefaModel = new TarefaModel();
        TarefaModel.ApplicationUserId = userId;
        TarefaModel.AssociatedUserId = userId;
        TarefaModel.ProjectId = ProjectId;
        this.Visibility = true;
    }

    public void DragStartHandler(Syncfusion.Blazor.Kanban.DragEventArgs<TarefaDto> args)
    {
        var data = args.Data[0];
        {
            OldAssociatedUserId = data.AssociatedUserId;
        };

        if (!userId.Equals(data.AssociatedUserId) && !userId.Equals(data.ApplicationUserId))
        {
            args.Cancel = true;
            UtilsService.ShowErrorToast(ToastObj, "You can only drag your own tasks.");
        }
    }

    private async Task LoadProjectById()
    {
        _project = await ProjectsService.GetByIdAsync(ProjectId);
        if (_project == null)
        {
            await UtilsService.ShowErrorToast(ToastObj, "Project not found");
            return;
        }
    }
    public void ToggleCreateTarefaView()
    {
        createTarefaView = !createTarefaView;
        if (!createTarefaView)
        {
            TarefaModel = new TarefaModel();
        }
    }
    private async Task LoadProjectUsers()
    {
        List<ProjectUserDto> projectUsers = await ProjectsService.GetProjectUsersAsync(ProjectId);
        foreach (ProjectUserDto user in projectUsers)
        {
            TarefaDto tarefa = new TarefaDto
            {
                Id = Guid.NewGuid(),
                Name = "",
                Description = "",
                AssociatedUserId = user.ApplicationUserId,
                Status = TarefaStatus.Placeholder,
                StatusDescription = TarefaStatus.Placeholder.ToString(),
                StartDate = DateTime.Now,
                EndDate = DateTime.Now,
                Notes = "",
                AssociatedUser = user.ApplicationUser,
                ApplicationUserId = user.ApplicationUserId,
            };

            _tarefas.Add(tarefa);
        }
    }

    public async Task CreateTarefa()
    {
        
        
        var res = new TarefaDto();
        if(TarefaModel.Id != null ){
        res = await TarefasService.UpdateAsync(TarefaModel.Id.Value, TarefaModel);
        }else{
        res = await TarefasService.CreateAsync(TarefaModel);

        }
        if (res != null)
        {
            await LoadTarefasByProjectId(ProjectId);
            await KanbanObj.RefreshAsync();
            TarefaModel = new TarefaModel();
            await UtilsService.ShowSuccessToast(ToastObj, res != null ? "Task Updated Successfully" : "Task Created Successfully");
            this.Visibility = false;
        }

    }
    private async Task IsOwner()
    {
        var isOwner = await ProjectsService.GetByIdAsync(ProjectId);
        if (userId.Equals(isOwner.ApplicationUserId))
        {
            this.isOwner = true;
            _allowDragAndDrop = true;
        }
        else
        {
            this.isOwner = false;
            _allowDragAndDrop = false;
        }
    }
    private async Task GetSessionUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
    }
    private async Task LoadTarefasByProjectId(Guid ProjectId)
    {
        var res = await ProjectsService.GetTarefasAsync(ProjectId);
        _tarefas = res;
        await LoadProjectUsers();
    }
    private async Task OnKanbanActionComplete(Syncfusion.Blazor.Kanban.ActionEventArgs<TarefaDto> args)
    {
        if (args.RequestType == "cardChange" && args.ChangedRecords?.Any() == true)
        {
            var changedRecord = args.ChangedRecords.First();
            if(changedRecord.StatusDescription == changedRecord.Status.ToString() && changedRecord.AssociatedUserId == OldAssociatedUserId)
            {
                return;
            }
            changedRecord.Status = changedRecord.StatusDescription switch
            {
                "Created" => TarefaStatus.Created,
                "InProgress" => TarefaStatus.InProgress,
                "OnHold" => TarefaStatus.OnHold,
                "Completed" => TarefaStatus.Completed,
                _ => changedRecord.Status
            };
            TarefaModel model = new TarefaModel();
            model.Id = changedRecord.Id;
            model.AssociatedUserId = changedRecord.AssociatedUserId;
            model.Code = changedRecord.Code;
            model.Name = changedRecord.Name;
            model.Description = changedRecord.Description;
            model.StartDate = changedRecord.StartDate;
            model.EndDate = changedRecord.EndDate;
            model.Notes = changedRecord.Notes;
            model.Status = changedRecord.Status;
            model.ProjectId = ProjectId;
            model.ApplicationUserId = changedRecord.ApplicationUserId;
            model.HourlyRate = changedRecord.HourlyRate;

            var result = await TarefasService.UpdateAsync(changedRecord.Id, model);
            if (result != null)
            {
                await UtilsService.ShowSuccessToast(ToastObj, "Task updated successfully");
            }
            else
            {
                await UtilsService.ShowErrorToast(ToastObj, "Error updating task");
            }

            await LoadTarefasByProjectId(ProjectId);
            await KanbanObj.RefreshAsync();
        }
    }

    private colorResult GetStatusClass(ProjectStatus status)
    {
        switch (status)
        {
            case ProjectStatus.Created:
                return new colorResult
                {
                    bgColor = "bg-color-created",
                    textColor = "color-created",
                    bgColorOpacity =
                "bg-color-created-opacity"
                };
            case ProjectStatus.Completed:
                return new colorResult
                {
                    bgColor = "bg-color-completed",
                    textColor = "color-completed",
                    bgColorOpacity =
                "bg-color-completed-opacity"
                };
            case ProjectStatus.InProgress:
                return new colorResult
                {
                    bgColor = "bg-color-inprogress",
                    textColor = "color-inprogress",
                    bgColorOpacity =
                "bg-color-inprogress-opacity"
                };
            case ProjectStatus.OnHold:
                return new colorResult
                {
                    bgColor = "bg-color-onhold",
                    textColor = "color-onhold",
                    bgColorOpacity =
                "bg-color-onhold-opacity"
                };
            default:
                return new colorResult { };
        }

    }

    public void CardClickHandler(CardClickEventArgs<TarefaDto> args)
    {
        var data = args.Data;
        if (data != null)
        {
            var tarefa = new TarefaModel
            {
                Id = data.Id,
                Name = data.Name,
                Description = data.Description,
                AssociatedUserId = data.AssociatedUserId,
                Status = data.Status,
                StartDate = data.StartDate,
                EndDate = data.EndDate,
                Notes = data.Notes,
                ApplicationUserId = data.ApplicationUserId,
                HourlyRate = data.HourlyRate,
            };
            TarefaModel = tarefa;
            this.Visibility = true;
        }
    }
      private void OnDialogOpen(DialogOpenEventArgs<TarefaDto> args)
    {
        args.Cancel = true;
    }
    private async Task DeleteTask(Guid taskId)
    {
        bool isConfirmed = await DialogService.ConfirmAsync(
            "Are you sure you want to delete this task?",
            "Delete",
            new DialogOptions
            {
                PrimaryButtonOptions = new DialogButtonOptions { Content = "Delete" },
                CancelButtonOptions = new DialogButtonOptions { Content = "Cancel" }
            });

        if (isConfirmed) {
            await TarefasService.DeleteAsync(taskId);
            await LoadTarefasByProjectId(ProjectId);
            await UtilsService.ShowSuccessToast(ToastObj, "Task deleted");
        }

    }

    private void openInviteDialog()
    {
        InviteDialogVisibility = true;
    }

    private async Task InviteUser()
    {
        if (string.IsNullOrEmpty(selectedUserId))
        {
            await UtilsService.ShowErrorToast(ToastObj, "Please select a user");
            return;
        }
        ProjectInviteModel projectInviteModel = new ProjectInviteModel();
        projectInviteModel.ProjectId = ProjectId;
        projectInviteModel.InvitedApplicationUserId = selectedUserId;
        projectInviteModel.SenderApplicationUserId = userId;

        var result = await ProjectsService.CreateProjectInviteAsync(projectInviteModel);
    
        if (result != null)
        {
            await LoadProjectById();
            InviteDialogVisibility = false;
            selectedUserId = null;
            await UtilsService.ShowSuccessToast(ToastObj, "Invitation sent successfully");
        }
        else
        {
            await UtilsService.ShowErrorToast(ToastObj, "Failed to send invitation");
        }
    }

    private async Task RemoveMember(string memberId)
    {
            bool isConfirmed = await DialogService.ConfirmAsync(
            "Are you sure you want to remove this member?",
            "Remove",
            new DialogOptions
            {
                PrimaryButtonOptions = new DialogButtonOptions { Content = "Remove" },
                CancelButtonOptions = new DialogButtonOptions { Content = "Cancel" }
            });
            var tarefas = await ProjectsService.GetTarefasByProjectIdAndAssociatedUserIdAsync(ProjectId, memberId);
            if (isConfirmed) {
                if(tarefas.Count > 0){
                    await UtilsService.ShowErrorToast(ToastObj, "Member has tasks assigned.");
                    return;
                }
            else{
                await ProjectsService.DeleteProjectUserByUserIdAndProjectId(memberId,ProjectId);
                await LoadTarefasByProjectId(ProjectId);
                await UtilsService.ShowSuccessToast(ToastObj, "Member Removed");
            }
        }
    }
}