@page "/projects"
@inject AuthenticationStateProvider AuthStateProvider
@inject IProjectsService ProjectsService
@inject ITarefasService TarefasService
@using System.Security.Claims;
@using FreelanceManager.Services.Projects
@using FreelanceManager.Services.Tarefas;
@using FreelanceManager.Data.Enum;
@using FreelanceManager.IO.Projects
@using FreelanceManager.IO.Tarefas;

@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Projects</PageTitle>
<div class="flex flex-column gap-16">
    <div class="flex flex-column">
        <h3>Projects</h3>
        <div class="flex gap-16 flex-wrap ">
            @foreach (var project in _personalProjects)
            {
                
            <div class="cardStyle h-180px w-300px flex flex-column">
                <h5>@project.Name</h5> 
                <p class="color-darkgrey">Client: @(project.ClientId == null ? "N/A" : project.Client?.Name)</p>
                <div class="flex gap-6 align-items-center">
                    <div class="statusCircle @( GetStatusClass(project.Status).bgColor)" ></div>
                    <div class="statusBadge @( GetStatusClass(project.Status).bgColorOpacity)" >
                        <div class="@( GetStatusClass(project.Status).textColor) ">
                            @project.Status
                        </div>
                    </div>
                </div>
                <p class="color-darkgrey mt-20 align-self-end">Tasks: @project.Tarefas.Count </p>
            </div>
            }
        </div>
    </div>
    <div class="flex flex-column">
        <h3>Personal Tasks</h3>
        <SfGrid DataSource="@_tarefas" AllowPaging="true">
            <GridPageSettings PageSize="10"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(TarefaDto.Name) HeaderText="Name"></GridColumn>
                <GridColumn Field=@nameof(TarefaDto.Description) HeaderText="Description"></GridColumn>
                <GridColumn Field=@nameof(TarefaDto.Status) HeaderText="Status"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    private List<ProjectDto> _personalProjects = new List<ProjectDto>();
    private List<TarefaDto> _tarefas = new List<TarefaDto>();
    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var idClaim = user.FindFirst(ClaimTypes.NameIdentifier);

        
        Console.WriteLine($"User ID claim: {idClaim.Value}");
        if (idClaim != null){
                _personalProjects = await ProjectsService.GetByUserIdAsync(idClaim.Value);
                _tarefas = await TarefasService.GetAllByApplicationUserIdAsync(idClaim.Value);
            }    
        }
    }

    private colorResult GetStatusClass(ProjectStatus status)
    {
        switch (status)
        {
            case ProjectStatus.Created:
                return new colorResult { bgColor = "bg-color-created", textColor = "color-created" , bgColorOpacity = "bg-color-created-opacity" };
            case ProjectStatus.Completed:
                return new colorResult { bgColor = "bg-color-completed", textColor = "color-completed" , bgColorOpacity = "bg-color-completed-opacity" };
            case ProjectStatus.InProgress:
                return new colorResult { bgColor = "bg-color-inprogress", textColor = "color-inprogress" , bgColorOpacity = "bg-color-inprogress-opacity" };    
            case ProjectStatus.OnHold:
                return new colorResult { bgColor = "bg-color-onhold", textColor = "color-onhold" , bgColorOpacity = "bg-color-onhold-opacity" };
            default:
                return new colorResult { };
        }

    }

    public class colorResult{
        public string bgColor { get; set; }
        public string textColor { get; set; }
        public string bgColorOpacity { get; set; }

    }
}     

