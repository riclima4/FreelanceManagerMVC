@page "/projects"
@inject AuthenticationStateProvider AuthStateProvider
@inject IProjectsService ProjectsService
@inject ITarefasService TarefasService
@inject IUtilsService UtilsService
@inject IClientsService ClientsService
@inject IReportService ReportService
@inject NavigationManager NavigationManager
@inject SfDialogService DialogService
@inject IJSRuntime JSRuntime

@using System.Security.Claims;
@using FreelanceManager.Services.Projects
@using FreelanceManager.Services.Utils
@using FreelanceManager.Services.Tarefas;
@using FreelanceManager.Data.Enum;
@using FreelanceManager.IO.Projects
@using FreelanceManager.IO.Tarefas;

@using FreelanceManager.IO.Clients
@using FreelanceManager.Services.Clients
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Calendars

@attribute [Authorize]

<PageTitle>Projects</PageTitle>
<div class="flex">
    <div class="flex flex-column gap-16 w-100">
        <div class="flex flex-column gap-10">            <div class="flex justify-content-space-between align-items-center">
                <h3>Projects</h3>                
                <div class="flex gap-10">
                    <SfButton CssClass="e-primary" @onclick="openGenerateReport" IconCss="e-icons e-download">Generate Report</SfButton>
                    <SfButton CssClass="e-primary" @onclick="openCreateNewProject">New Project +</SfButton>
                </div>
            </div>
            <p hidden="@(_personalProjects.Count > 0)">No Projects created!</p>
            <div hidden="@(_personalProjects.Count == 0)" class="flex gap-16 flex-wrap ">
                @foreach (var project in _personalProjects)
                {

                    <div class="cardStyle cardStyle2 addPointer h-180px w-300px flex flex-column"
                         @onclick="() => GoToProjectPage(project.Id)">
                        <div class="flex justify-content-space-between align-items-center">
                            <h5 class="m-0">@project.Name</h5>
                            @if (project.ApplicationUserId == userId)
                            {
                                <i class="fa-solid fa-certificate"></i>
                            }
                        </div>
                        <p class="color-darkgrey">Client: @(project.ClientId == null ? "N/A" : project.Client?.Name)</p>
                        <div class="flex gap-6 align-items-center">
                            <div class="statusCircle @(GetStatusClass(project.Status).bgColor)"></div>
                            <div class="statusBadge @(GetStatusClass(project.Status).bgColorOpacity)">
                                <div class="@(GetStatusClass(project.Status).textColor) ">
                                    @project.Status
                                </div>
                            </div>
                        </div>
                        <div class="flex justify-content-space-between align-items-center">
                            <div class="statusBadge bg-color-purple color-white">
                                Members: @project.ProjectUsers.Count
                            </div>
                            <p class="color-darkgrey mt-20 align-self-end">Tasks: @project.Tarefas.Count </p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="divider"></div>
        <div class="flex flex-column gap-10">
            <div class="flex justify-content-space-between align-items-center">
                <h3>Personal Tasks</h3>
                <SfButton CssClass="e-primary" @onclick="openCreateNewTask">New Task
                    +</SfButton>
            </div>
            <SfKanban @ref="KanbanObj" TValue="TarefaDto" KeyField="StatusDescription" DataSource="_tarefas" AllowDragAndDrop="true">
                <KanbanColumns>
                    <KanbanColumn HeaderText="To Do" KeyField="@(new List<string>() { "Created" })"></KanbanColumn>
                    <KanbanColumn HeaderText="In Progress" KeyField="@(new List<string>() { "InProgress" })">
                    </KanbanColumn>
                    <KanbanColumn HeaderText="On Hold" KeyField="@(new List<string>() { "OnHold" })"></KanbanColumn>
                    <KanbanColumn HeaderText="Completed" KeyField="@(new List<string>() { "Completed" })">
                    </KanbanColumn>
                </KanbanColumns>
                <KanbanCardSettings HeaderField="Name" ContentField="Description">
                    <Template>
                        @{
                            var data = (context as TarefaDto);
                            var statusText = data.Status.ToString();
                            var statusClass = GetStatusClass(statusText);
                            <div class="custom-kanban-card status-@statusText">
                                <div class="status-indicator @statusClass.bgColor"></div>
                                <div class="card-title">@data.Name</div>
                                <div class="card-desc">@data.Description</div>
                                @if (!string.IsNullOrEmpty(data.Notes))
                                {
                                    <div class="card-notes">@data.Notes</div>
                                }
                                <div class="card-footer">
                                    <span class="hourly-rate">@(data.HourlyRate.HasValue ? $"â‚¬{data.HourlyRate:F2}/h" : "")</span>
                                </div>
                                <div class="task-delete-actions">
                                    <button class="task-delete-button" @onclick="() => DeleteTask(data.Id)" @onclick:stopPropagation="true">
                                        <i class="fa fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </Template>
                </KanbanCardSettings>                         
                <KanbanEvents TValue="TarefaDto" DialogOpen="@OnDialogOpen" CardClick="@CardClickHandler" ActionComplete="OnKanbanActionComplete">
                </KanbanEvents>
            </SfKanban>
        </div>
    </div>
    <div>
    <SfToast ID="toast_default" @ref="ToastObj">
        <ToastPosition X="Center"></ToastPosition>
    </SfToast>
    </div>

    <SfDialog Target="#target" Width="400px" ShowCloseIcon="true" @bind-Visible="projectDialogVisibility" 
              IsModal="true">
        <DialogTemplates>
            <Header> Create Project </Header>
            <Content>
                <EditForm Model="ProjectModel" method="post" OnValidSubmit="CreateProject" FormName="ProjectForm"
                          class="w-100 flex flex-column gap-10" style="margin-top: 5px; !important">
                    <DataAnnotationsValidator />
                    <SfTextBox Placeholder='Name' CssClass="e-outline" @bind-Value="ProjectModel.Name"
                               id="ProjectModel.Name" FloatLabelType="FloatLabelType.Always">
                    </SfTextBox>
                    <SfTextBox Placeholder='Description' Type="InputType.Text" CssClass="e-outline"
                               FloatLabelType="FloatLabelType.Always" @bind-Value="ProjectModel.Description"
                               id="ProjectModel.Description">
                    </SfTextBox>
                    <SfComboBox TValue="Guid?" TItem="ClientDto" Placeholder="Client" CssClass="e-outline"
                                DataSource="@_clients"  @bind-Value="ProjectModel.ClientId"> 
                        <ComboBoxFieldSettings Value="Id" Text="Name"></ComboBoxFieldSettings>
                    </SfComboBox>
                    <SfTextBox Placeholder='Notes' Type="InputType.Text" CssClass="e-outline"
                               FloatLabelType="FloatLabelType.Always" @bind-Value="ProjectModel.Notes" id="ProjectModel.Notes">
                    </SfTextBox>
                    <SfButton Type="submit" CssClass="e-primary" class="w-100">@(ProjectModel.Id == null ? "Create":"Update")</SfButton>
                </EditForm>
            </Content>
        </DialogTemplates>
    </SfDialog>    <SfDialog Target="#target" Width="400px" ShowCloseIcon="true" @bind-Visible="tarefaDialogVisibility" 
              IsModal="true">
        <DialogTemplates>
            <Header> Create Task </Header>
            <Content>
                <EditForm Model="TarefaModel" method="post" OnValidSubmit="CreateTarefa" FormName="TarefaForm"
                          class="w-100 flex flex-column gap-10" style="margin-top: 5px; !important"> 
                    <DataAnnotationsValidator />
                    <SfTextBox Placeholder='Name' CssClass="e-outline" @bind-Value="TarefaModel.Name" id="TarefaModel.Name"
                               FloatLabelType="FloatLabelType.Always">
                    </SfTextBox>
                    <SfTextBox Placeholder='Description' Type="InputType.Text" CssClass="e-outline"
                               FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.Description"
                               id="TarefaModel.Description">
                    </SfTextBox>
                    <SfTextBox Placeholder='Notes' Type="InputType.Text" CssClass="e-outline"
                               FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.Notes" id="TarefaModel.Notes">
                    </SfTextBox>
                    <SfNumericTextBox  CssClass="e-outline" Format="c2"  Min="0" Placeholder="Hourly Rate"
                                       Decimals="2" ValidateDecimalOnType="true"
                                       FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.HourlyRate" id="TarefaModel.HourlyRate">
                    </SfNumericTextBox>
                    <SfButton Type="submit" CssClass="e-primary" class="w-100">@(TarefaModel.Id == null ? "Create":"Update")</SfButton>
                </EditForm>
            </Content>
        </DialogTemplates>
    </SfDialog>
      <SfDialog Target="#target" Width="400px" ShowCloseIcon="true" @bind-Visible="reportDialogVisibility" 
              IsModal="true">
        <DialogTemplates>
            <Header> Generate Report </Header>
            <Content>
                <div class="w-100 flex flex-column gap-10" style="margin-top: 5px;">
                    <SfDatePicker Placeholder='Start Date' CssClass="e-outline" @bind-Value="reportStartDate" 
                                  id="reportStartDate" FloatLabelType="FloatLabelType.Always">
                    </SfDatePicker>
                    <SfDatePicker Placeholder='End Date' CssClass="e-outline" @bind-Value="reportEndDate"
                                  id="reportEndDate" FloatLabelType="FloatLabelType.Always">
                    </SfDatePicker>
                    <SfButton CssClass="e-primary" class="w-100" @onclick="GenerateReport">Generate Report</SfButton>
                </div>
            </Content>
        </DialogTemplates>
    </SfDialog>
</div>
<SfDialogProvider />

<script>
    window.downloadFile = (dataUrl, fileName) => {
        const link = document.createElement('a');
        link.href = dataUrl;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };
</script>

@code {
    SfToast ToastObj;
    SfKanban<TarefaDto> KanbanObj;
    private List<ProjectDto> _personalProjects = new List<ProjectDto>();
    private List<TarefaDto> _tarefas = new List<TarefaDto>();
    private List<ClientDto> _clients = new();
    private string userId;    private ProjectModel ProjectModel { get; set; } = new();
    private TarefaModel TarefaModel { get; set; } = new();
    private DateTime reportStartDate = DateTime.Now.AddDays(-30);
    private DateTime reportEndDate = DateTime.Now;
    private bool tarefaDialogVisibility = false;
    private bool projectDialogVisibility = false;
    private bool reportDialogVisibility = false;
    protected override async Task OnInitializedAsync()
    {
        await GetSessionUserId();
        await LoadProjects();
        await LoadTarefas();
        await LoadClients();
        @* StateHasChanged(); *@

    }

    public async Task CreateProject()
    {       
          var res = new ProjectDto();
        if(ProjectModel.Id != null ){
        res = await ProjectsService.UpdateAsync(ProjectModel.Id.Value, ProjectModel);
        }else{
        res = await ProjectsService.CreateAsync(ProjectModel);

        } 
        if (res != null)
        {
            await LoadProjects();
            ProjectModel = new ProjectModel();
            await UtilsService.ShowSuccessToast(ToastObj, res != null ? "Project Updated Successfully" : "Project Created Successfully");
            this.projectDialogVisibility = false;

        }
    }
    public async Task CreateTarefa()
    {
         var res = new TarefaDto();
        if(TarefaModel.Id != null ){
        res = await TarefasService.UpdateAsync(TarefaModel.Id.Value, TarefaModel);
        }else{
        res = await TarefasService.CreateAsync(TarefaModel);

        }
        if (res != null)
        {
            await LoadTarefas();
            await this.KanbanObj.RefreshAsync();
            TarefaModel = new TarefaModel();
            await UtilsService.ShowSuccessToast(ToastObj, res != null ? "Task Updated Successfully" : "Task Created Successfully");
            this.tarefaDialogVisibility = false;

        }

    }

    public async Task GetSessionUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
    }

    public async Task LoadTarefas()
    {
        _tarefas = await TarefasService.GetPersonalByApplicationUserIdAsync(userId);
    }
    private async Task LoadClients()
    {
        _clients = await ClientsService.GetAllByApplicationUserIdAsync(userId);
    }
    public async Task LoadProjects()
    {
        _personalProjects = await ProjectsService.GetProjectContainsInProjectUsersAsync(userId);
        
    }

    private colorResult GetStatusClass(ProjectStatus status)
    {
        switch (status)
        {
            case ProjectStatus.Created:
                return new colorResult
                {
                    bgColor = "bg-color-created",
                    textColor = "color-created",
                    bgColorOpacity = "bg-color-created-opacity"
                };
            case ProjectStatus.Completed:
                return new colorResult
                {
                    bgColor = "bg-color-completed",
                    textColor = "color-completed",
                    bgColorOpacity = "bg-color-completed-opacity"
                };
            case ProjectStatus.InProgress:
                return new colorResult
                {
                    bgColor = "bg-color-inprogress",
                    textColor = "color-inprogress",
                    bgColorOpacity = "bg-color-inprogress-opacity"
                };
            case ProjectStatus.OnHold:
                return new colorResult
                {
                    bgColor = "bg-color-onhold",
                    textColor = "color-onhold",
                    bgColorOpacity = "bg-color-onhold-opacity"
                };
            default:
                return new colorResult { };
        }
    }
    
    private colorResult GetStatusClass(string statusStr)
    {
        switch (statusStr)
        {
            case "Created":
                return new colorResult
                {
                    bgColor = "bg-color-created",
                    textColor = "color-created",
                    bgColorOpacity = "bg-color-created-opacity"
                };
            case "Completed":
                return new colorResult
                {
                    bgColor = "bg-color-completed",
                    textColor = "color-completed",
                    bgColorOpacity = "bg-color-completed-opacity"
                };
            case "InProgress":
                return new colorResult
                {
                    bgColor = "bg-color-inprogress",
                    textColor = "color-inprogress",
                    bgColorOpacity = "bg-color-inprogress-opacity"
                };
            case "OnHold":
                return new colorResult
                {
                    bgColor = "bg-color-onhold",
                    textColor = "color-onhold",
                    bgColorOpacity = "bg-color-onhold-opacity"
                };
            default:
                return new colorResult { };
        }

    }

    public class colorResult
    {
        public string bgColor { get; set; }
        public string textColor { get; set; }
        public string bgColorOpacity { get; set; }

    }
    private void OnDialogOpen(DialogOpenEventArgs<TarefaDto> args)
    {
        args.Cancel = true;
    }
    private async Task OnKanbanActionComplete(Syncfusion.Blazor.Kanban.ActionEventArgs<TarefaDto> args)
    {
        if (args.RequestType == "cardChange" && args.ChangedRecords?.Any() == true)
        {
            var changedRecord = args.ChangedRecords.First();
            if(changedRecord.StatusDescription == changedRecord.Status.ToString())
            {
                return;
            }
            changedRecord.Status = changedRecord.StatusDescription switch
            {
                "Created" => TarefaStatus.Created,
                "InProgress" => TarefaStatus.InProgress,
                "OnHold" => TarefaStatus.OnHold,
                "Completed" => TarefaStatus.Completed,
                _ => changedRecord.Status
            };
            TarefaModel model = new TarefaModel();

            model.Code = changedRecord.Code;
            model.Name = changedRecord.Name;
            model.Description = changedRecord.Description;
            model.StartDate = changedRecord.StartDate;
            model.EndDate = changedRecord.EndDate;
            model.Notes = changedRecord.Notes;
            model.Status = changedRecord.Status;

            var result = await TarefasService.UpdateAsync(changedRecord.Id, model);
            if (result != null)
            {
                await UtilsService.ShowSuccessToast(ToastObj, "Task updated successfully");
            }
            else
            {
                await UtilsService.ShowErrorToast(ToastObj, "Error updating task");
            }
            await LoadTarefas();
            await KanbanObj.RefreshAsync();

        }
    }

    private void GoToProjectPage(Guid projectId)
    {
        var uri = NavigationManager.GetUriWithQueryParameters("ProjectPage", new Dictionary<string, object>
        {
            ["ProjectId"] =
        projectId
        });
        NavigationManager.NavigateTo(uri);

    }

    private async Task DeleteTask(Guid taskId)
    {
        bool isConfirmed = await DialogService.ConfirmAsync(
            "Are you sure you want to delete this task?",
            "Delete",
            new DialogOptions
            {
                PrimaryButtonOptions = new DialogButtonOptions { Content = "Delete" },
                CancelButtonOptions = new DialogButtonOptions { Content = "Cancel" }
            });

        if (isConfirmed) {
            await TarefasService.DeleteAsync(taskId);
            await LoadTarefas();
            await UtilsService.ShowSuccessToast(ToastObj, "Task deleted");
        }

        }

        private void openCreateNewTask()
    {
        TarefaModel = new TarefaModel();
        TarefaModel.ApplicationUserId = userId;
        TarefaModel.AssociatedUserId = userId;
        this.tarefaDialogVisibility = true;
    }        private void openCreateNewProject()
    {
        ProjectModel = new ProjectModel();
        ProjectModel.ApplicationUserId = userId;        
        this.projectDialogVisibility = true;
    }

    public void CardClickHandler(CardClickEventArgs<TarefaDto> args)
    {
        var data = args.Data;
        if (data != null)
        {
            var tarefa = new TarefaModel
            {
                Id = data.Id,
                Name = data.Name,
                Description = data.Description,
                AssociatedUserId = data.AssociatedUserId,
                Status = data.Status,
                StartDate = data.StartDate,
                EndDate = data.EndDate,
                Notes = data.Notes,
                ApplicationUserId = data.ApplicationUserId,
                HourlyRate = data.HourlyRate,
            };            TarefaModel = tarefa;
            this.tarefaDialogVisibility = true;
        }
    }    private void openGenerateReport()
    {
        reportStartDate = DateTime.Now.AddDays(-30);
        reportEndDate = DateTime.Now;
        this.reportDialogVisibility = true;
    }

    private async Task GenerateReport()
    {
        try
        {
            if (reportStartDate > reportEndDate)
            {
                await UtilsService.ShowErrorToast(ToastObj, "Start date must be before end date");
                return;
            }

            var report = await ReportService.GeneratePersonalReportAsync(userId, reportStartDate, reportEndDate);
            
            if (report != null)
            {
                
                if (report.DailyReports.Count > 0)
                {
                    var pdfStream = await ReportService.GeneratePersonalReportPdfAsync(userId, reportStartDate, reportEndDate);
                    
                    if (pdfStream != null)
                    {
                        var fileName = $"Report_{reportStartDate:yyyy-MM-dd}_to_{reportEndDate:yyyy-MM-dd}.pdf";
                        
                        var bytes = pdfStream.ToArray();
                        
                        var base64 = Convert.ToBase64String(bytes);
                        var dataUrl = $"data:application/pdf;base64,{base64}";
                        
                        await JSRuntime.InvokeVoidAsync("downloadFile", dataUrl, fileName);
                        
                        await UtilsService.ShowSuccessToast(ToastObj, "Report PDF downloaded successfully!");
                        this.reportDialogVisibility = false;
                    }
                    else
                    {
                        await UtilsService.ShowErrorToast(ToastObj, "Failed to generate report PDF");
                    }
                }
                else
                {
                    await UtilsService.ShowSuccessToast(ToastObj, "No data found for the selected date range");
                }
            }
            else
            {
                await UtilsService.ShowErrorToast(ToastObj, "Failed to generate report data");
            }
        }
        catch (Exception ex)
        {
            await UtilsService.ShowErrorToast(ToastObj, $"Error generating report: {ex.Message}");
        }
    }}
