@page "/projects"
@inject AuthenticationStateProvider AuthStateProvider
@inject IProjectsService ProjectsService
@inject ITarefasService TarefasService
@using System.Security.Claims;
@using FreelanceManager.Services.Projects
@using FreelanceManager.Services.Tarefas;
@using FreelanceManager.Data.Enum;
@using FreelanceManager.IO.Projects
@using FreelanceManager.IO.Tarefas;

@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Projects</PageTitle>
<div class="flex flex-column gap-16">
    <div class="flex flex-column">
        <h3>Projects</h3>
        <div class="flex gap-16 flex-wrap ">
            @foreach (var project in _personalProjects)
            {
                
            <div class="cardStyle h-180px w-300px flex flex-column">
                <h5>@project.Name</h5> 
                <p class="color-darkgrey">Client: @(project.ClientId == null ? "N/A" : project.Client?.Name)</p>
                <div class="flex gap-6 align-items-center">
                    <div class="statusCircle @(project.Status == ProjectStatus.Created ? "bg-color-created" : 
                    project.Status == ProjectStatus.Completed ? "bg-color-completed" : 
                    project.Status == ProjectStatus.InProgress ? "bg-color-inprogress" :
                     "bg-color-onhold")" ></div>
                    <div class="statusBadge " >
                        <div class="@(project.Status == ProjectStatus.Created ? "color-created" : 
                    project.Status == ProjectStatus.Completed ? "color-completed" : 
                    project.Status == ProjectStatus.InProgress ? "color-inprogress" :
                     "color-onhold") fb-bold">
                            @project.Status
                        </div>
                    </div>
                </div>
                <p class="color-darkgrey mt-20 align-self-end">Tasks: @project.Tarefas.Count </p>
            </div>
            }
        </div>
    </div>
    <div class="flex flex-column">
        <h3>Personal Tasks</h3>
        <SfGrid DataSource="@_tarefas" AllowPaging="true">
            <GridPageSettings PageSize="10"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(TarefaDto.Name) HeaderText="Name"></GridColumn>
                <GridColumn Field=@nameof(TarefaDto.Description) HeaderText="Description"></GridColumn>
                <GridColumn Field=@nameof(TarefaDto.Status) HeaderText="Satus"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@code {
    private List<ProjectDto> _personalProjects = new List<ProjectDto>();
    private List<TarefaDto> _tarefas = new List<TarefaDto>();
    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            var idClaim = user.FindFirst(ClaimTypes.NameIdentifier);

        
        Console.WriteLine($"User ID claim: {idClaim.Value}");
        if (idClaim != null){
                _personalProjects = await ProjectsService.GetByUserIdAsync(idClaim.Value);
                _tarefas = await TarefasService.GetAllByApplicationUserIdAsync(idClaim.Value);
            }    
        }


    }

}     