@page "/projects"
@inject AuthenticationStateProvider AuthStateProvider
@inject IProjectsService ProjectsService
@inject ITarefasService TarefasService
@inject IUtilsService UtilsService
@inject NavigationManager NavigationManager

@using System.Security.Claims;
@using FreelanceManager.Services.Projects
@using FreelanceManager.Services.Utils
@using FreelanceManager.Services.Tarefas;
@using FreelanceManager.Data.Enum;
@using FreelanceManager.IO.Projects
@using FreelanceManager.IO.Tarefas;
@using Syncfusion.Blazor.Inputs
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<PageTitle>Projects</PageTitle>
<div class="flex">
    <div class="flex flex-column gap-16 w-100">
        <div class="flex flex-column gap-10">
            <div class="flex justify-content-space-between align-items-center">
                <h3>Projects</h3>
                <SfButton CssClass="e-primary" @onclick="ToggleCreateProjectView" hidden="@(createProjectView)">New
                    Project
                    +</SfButton>
            </div>
            <p hidden="@(_personalProjects.Count > 0)">No Projects created!</p>
            <div hidden="@(_personalProjects.Count == 0)" class="flex gap-16 flex-wrap ">
                @foreach (var project in _personalProjects)
                {

                    <div class="cardStyle addPointer h-180px w-300px flex flex-column"
                        @onclick="() => GoToProjectPage(project.Id)">

                        <h5>@project.Name</h5>
                        <p class="color-darkgrey">Client: @(project.ClientId == null ? "N/A" : project.Client?.Name)</p>
                        <div class="flex gap-6 align-items-center">
                            <div class="statusCircle @(GetStatusClass(project.Status).bgColor)"></div>
                            <div class="statusBadge @(GetStatusClass(project.Status).bgColorOpacity)">
                                <div class="@(GetStatusClass(project.Status).textColor) ">
                                    @project.Status
                                </div>
                            </div>
                        </div>
                        <div class="flex justify-content-space-between align-items-center">
                            <div class="statusBadge bg-color-purple color-white">
                                Members: @project.ProjectUsers.Count
                            </div>
                            <p class="color-darkgrey mt-20 align-self-end">Tasks: @project.Tarefas.Count </p>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="divider"></div>
        <div class="flex flex-column gap-10">
            <div class="flex justify-content-space-between align-items-center">
                <h3>Personal Tasks</h3>
                <SfButton CssClass="e-primary" @onclick="ToggleCreateTarefaView" hidden="@(createTarefaView)">New Task
                    +</SfButton>
            </div>
            @* <SfGrid DataSource="@_tarefas" AllowPaging="true">
                <GridPageSettings PageSize="10"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(TarefaDto.Name) HeaderText="Name"></GridColumn>
                    <GridColumn Field=@nameof(TarefaDto.Description) HeaderText="Description"></GridColumn>
                    <GridColumn Field=@nameof(TarefaDto.Status) HeaderText="Status"></GridColumn>
                    <GridColumn Field=@nameof(TarefaDto.StatusDescription) HeaderText="StatusDescription"></GridColumn>
                </GridColumns>
            </SfGrid> *@
            <SfKanban @ref="KanbanObj" TValue="TarefaDto" KeyField="StatusDescription" DataSource="_tarefas">
                <KanbanColumns>
                    <KanbanColumn HeaderText="To Do" KeyField="@(new List<string>() { "Created" })"></KanbanColumn>
                    <KanbanColumn HeaderText="In Progress" KeyField="@(new List<string>() { "InProgress" })">
                    </KanbanColumn>
                    <KanbanColumn HeaderText="On Hold" KeyField="@(new List<string>() { "OnHold" })"></KanbanColumn>
                    <KanbanColumn HeaderText="Completed" KeyField="@(new List<string>() { "Completed" })">
                    </KanbanColumn>
                </KanbanColumns>
                <KanbanCardSettings HeaderField="Name" ContentField="Description"></KanbanCardSettings>
                @* <KanbanSwimlaneSettings KeyField="Assignee"></KanbanSwimlaneSettings> *@
                <KanbanEvents TValue="TarefaDto" DialogOpen="@OnDialogOpen" ActionComplete="OnKanbanActionComplete">
                </KanbanEvents>
            </SfKanban>
        </div>
    </div>
    <div class="w-50 p-16" hidden="@(!createProjectView)">
        <div class="flex justify-content-end align-items-center">
            <SfButton CssClass="e-flat" @onclick="ToggleCreateProjectView">X</SfButton>
        </div>
        <div class="cardStyle">
            <h5>New Project</h5>
            <EditForm Model="ProjectModel" method="post" OnValidSubmit="CreateProject" FormName="ProjectForm"
                class="w-100 flex flex-column gap-10">
                <DataAnnotationsValidator />
                <SfTextBox Placeholder='Name' CssClass="e-outline" @bind-Value="ProjectModel.Name"
                    id="ProjectModel.Name" FloatLabelType="FloatLabelType.Always">
                </SfTextBox>
                <SfTextBox Placeholder='Description' Type="InputType.Text" CssClass="e-outline"
                    FloatLabelType="FloatLabelType.Always" @bind-Value="ProjectModel.Description"
                    id="ProjectModel.Description">
                </SfTextBox>
                <SfTextBox Placeholder='Notes' Type="InputType.Text" CssClass="e-outline"
                    FloatLabelType="FloatLabelType.Always" @bind-Value="ProjectModel.Notes" id="ProjectModel.Notes">
                </SfTextBox>
                <SfButton Type="submit" CssClass="e-primary" class="w-100">Create</SfButton>
            </EditForm>
        </div>
    </div>
    <div class="w-50 p-16" hidden="@(!createTarefaView)">
        <div class="flex justify-content-end align-items-center">
            <SfButton CssClass="e-flat" @onclick="ToggleCreateTarefaView">X</SfButton>
        </div>
        <div class="cardStyle">
            <h5>New Personal Task</h5>
            <EditForm Model="TarefaModel" method="post" OnValidSubmit="CreateTarefa" FormName="TarefaForm"
                class="w-100 flex flex-column gap-10">
                <DataAnnotationsValidator />
                <SfTextBox Placeholder='Name' CssClass="e-outline" @bind-Value="TarefaModel.Name" id="TarefaModel.Name"
                    FloatLabelType="FloatLabelType.Always">
                </SfTextBox>
                <SfTextBox Placeholder='Description' Type="InputType.Text" CssClass="e-outline"
                    FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.Description"
                    id="TarefaModel.Description">
                </SfTextBox>
                <SfTextBox Placeholder='Notes' Type="InputType.Text" CssClass="e-outline"
                    FloatLabelType="FloatLabelType.Always" @bind-Value="TarefaModel.Notes" id="TarefaModel.Notes">
                </SfTextBox>
                <SfButton Type="submit" CssClass="e-primary" class="w-100">Create</SfButton>
            </EditForm>
        </div>
    </div>
    <SfToast ID="toast_default" @ref="ToastObj">
        <ToastPosition X="Center"></ToastPosition>
    </SfToast>

</div>
@code {
    SfToast ToastObj;
    SfKanban<TarefaDto> KanbanObj;
    private List<ProjectDto> _personalProjects = new List<ProjectDto>();
    private List<TarefaDto> _tarefas = new List<TarefaDto>();
    private string userId;
    private bool createProjectView = false;
    private bool createTarefaView = false;
    private ProjectModel ProjectModel { get; set; } = new();
    private TarefaModel TarefaModel { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        await GetSessionUserId();
        await LoadProjects();
        await LoadTarefas();
    }

    public async Task CreateProject()
    {

        ProjectModel.ApplicationUserId = userId;

        var res = await ProjectsService.CreateAsync(ProjectModel);
        if (res != null)
        {
            await LoadProjects();
            ProjectModel = new ProjectModel();
            await UtilsService.ShowSuccessToast(ToastObj, "Project Created Successfully");

        }

    }
    public async Task CreateTarefa()
    {
        TarefaModel.ApplicationUserId = userId;
        TarefaModel.AssociatedUserId = userId;
        var res = await TarefasService.CreateAsync(TarefaModel);
        if (res != null)
        {
            await LoadTarefas();
            TarefaModel = new TarefaModel();
            await UtilsService.ShowSuccessToast(ToastObj, "Task Created Successfully");

        }

    }

    public async Task GetSessionUserId()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
    }

    public async Task LoadTarefas()
    {
        _tarefas = await TarefasService.GetAllByApplicationUserIdAsync(userId);
    }

    public async Task LoadProjects()
    {
        _personalProjects = await ProjectsService.GetProjectContainsInProjectUsersAsync(userId);
    }

    public void ToggleCreateProjectView()
    {
        createProjectView = !createProjectView;
        if (!createProjectView)
        {
            ProjectModel = new ProjectModel();
        }
        else
        {
            createTarefaView = false;
        }
    }
    public void ToggleCreateTarefaView()
    {
        createTarefaView = !createTarefaView;
        if (!createTarefaView)
        {
            TarefaModel = new TarefaModel();
        }
        else
        {
            createProjectView = false;
        }
    }

    private colorResult GetStatusClass(ProjectStatus status)
    {
        switch (status)
        {
            case ProjectStatus.Created:
                return new colorResult
                {
                    bgColor = "bg-color-created",
                    textColor = "color-created",
                    bgColorOpacity =
                "bg-color-created-opacity"
                };
            case ProjectStatus.Completed:
                return new colorResult
                {
                    bgColor = "bg-color-completed",
                    textColor = "color-completed",
                    bgColorOpacity =
                "bg-color-completed-opacity"
                };
            case ProjectStatus.InProgress:
                return new colorResult
                {
                    bgColor = "bg-color-inprogress",
                    textColor = "color-inprogress",
                    bgColorOpacity =
                "bg-color-inprogress-opacity"
                };
            case ProjectStatus.OnHold:
                return new colorResult
                {
                    bgColor = "bg-color-onhold",
                    textColor = "color-onhold",
                    bgColorOpacity =
                "bg-color-onhold-opacity"
                };
            default:
                return new colorResult { };
        }

    }

    public class colorResult
    {
        public string bgColor { get; set; }
        public string textColor { get; set; }
        public string bgColorOpacity { get; set; }

    }
    private void OnDialogOpen(DialogOpenEventArgs<TarefaDto> args)
    {
        args.Cancel = true;
    }
    private async Task OnKanbanActionComplete(Syncfusion.Blazor.Kanban.ActionEventArgs<TarefaDto> args)
    {
        if (args.RequestType == "cardChange" && args.ChangedRecords?.Any() == true)
        {
            var changedRecord = args.ChangedRecords.First();
            changedRecord.Status = changedRecord.StatusDescription switch
            {
                "Created" => TarefaStatus.Created,
                "InProgress" => TarefaStatus.InProgress,
                "OnHold" => TarefaStatus.OnHold,
                "Completed" => TarefaStatus.Completed,
                _ => changedRecord.Status
            };
            TarefaModel model = new TarefaModel();

            model.Code = changedRecord.Code;
            model.Name = changedRecord.Name;
            model.Description = changedRecord.Description;
            model.StartDate = changedRecord.StartDate;
            model.EndDate = changedRecord.EndDate;
            model.Notes = changedRecord.Notes;
            model.Status = changedRecord.Status;

            var result = await TarefasService.UpdateAsync(changedRecord.Id, model);
            if (result != null)
            {
                await UtilsService.ShowSuccessToast(ToastObj, "Task updated successfully");
            }
            else
            {
                await UtilsService.ShowErrorToast(ToastObj, "Error updating task");
            }
            await LoadTarefas();
            await KanbanObj.RefreshAsync();

        }
    }

    private void GoToProjectPage(Guid projectId)
    {
        var uri = NavigationManager.GetUriWithQueryParameters("ProjectPage", new Dictionary<string, object>
        {
            ["ProjectId"] =
        projectId
        });
        NavigationManager.NavigateTo(uri);

    }

}
