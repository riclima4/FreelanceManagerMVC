@page "/Account/Login"
@layout FreelanceManager.Components.Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FreelanceManager.Data
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Microsoft.JSInterop

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="bg-color-black d-flex flex-column min-vh-100">
    <!-- Header com botão de retorno - design minimalista -->
    <header class="container py-4">
        <div class="d-flex justify-content-between align-items-center">
            <a href="/" class="back-link d-flex align-items-center text-decoration-none">
                <i class="fas fa-chevron-left me-2"></i>
                <span>Home</span>
            </a>
        </div>
    </header>

    <!-- Conteúdo principal centralizado com design moderno -->
    <div class="flex-grow-1 d-flex justify-content-center align-items-center px-3">
        <div class="login-card" style="max-width: 400px; width: 100%;">
            <div class="card-body d-flex flex-column align-items-center p-4 p-md-5">
                <!-- Logo com animação sutil -->
                <div class="text-center mb-4 logo-container">
                    <img src="assets/logo.svg" alt="logo freelance manager" class="w-75 mb-2" />
                </div>
                
                <!-- Texto de boas-vindas mais pessoal -->
                <h2 class="welcome-text mb-1">Welcome back</h2>
                <p class="text-secondary mb-4 text-center subtitle">Access your workspace and manage your projects</p>
                
                <!-- Mensagens de erro com design melhorado -->
                <div class="w-100 mb-3">
                    <StatusMessage Message="@errorMessage" />
                </div>
                
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login"
                    class="w-100 d-flex flex-column gap-4">
                    <DataAnnotationsValidator />
                    
                    <!-- Inputs com espaçamento melhorado -->
                    <div class="input-container">
                        <SfTextBox Placeholder='Username' CssClass="login-input" @bind-Value="Input.UserName" id="Input.Username"
                            FloatLabelType="FloatLabelType.Always">
                        </SfTextBox>
                    </div>
                    
                    <div class="input-container">
                        <div class="password-container">
                            <SfTextBox Placeholder='Password' Type="InputType.Password" CssClass="login-input"
                                FloatLabelType="FloatLabelType.Always" @bind-Value="Input.Password" id="Input.Password">
                            </SfTextBox>
                            <button type="button" class="password-toggle" @onclick="TogglePasswordVisibilityJS">
                                <i id="passwordIcon" class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Botão com design mais moderno -->
                    <button type="submit" class="login-button mt-2">
                        Sign In
                    </button>
                    
                    <!-- Link para recuperação de senha com design mais limpo -->
                    <div class="text-center mt-1">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/ForgotPassword", new Dictionary<string, object> { ["ReturnUrl"] = ReturnUrl }))"
                            class="forgot-password-link">
                            Forgot your password?
                        </a>
                    </div>
                </EditForm>
                
                <!-- Separador visual mais elegante -->
                <div class="text-center mt-4 account-toggle">
                    <p class="text-secondary">
                        New to FreelanceManager? 
                        <a class="signup-link" href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object> { ["ReturnUrl"] = ReturnUrl }))">
                            Create account
                        </a>
                    </p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Footer mais discreto -->
    <footer class="container text-center py-3">
        <p class="copyright"> 2025 FreelanceManager</p>
    </footer>
</div>

<style>
    /* Estilos do card com design mais moderno */
    .login-card {
        border-radius: 20px;
        color: #e0e0e0;
        text-align: left;
        transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
        border: none;
        background: linear-gradient(145deg, #252525, #312f41);
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
    }

    .login-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.4);
    }
    
    /* Link para voltar com design minimalista */
    .back-link {
        color: rgba(255, 255, 255, 0.6);
        transition: all 0.3s ease;
        font-size: 14px;
        letter-spacing: 0.3px;
    }
    
    .back-link:hover {
        color: #8257E5;
        transform: translateX(-3px);
    }
    
    /* Animação sutil para o logo */
    .logo-container {
        transition: transform 0.5s ease;
    }
    
    .logo-container:hover {
        transform: scale(1.03);
    }
    
    /* Texto de boas-vindas */
    .welcome-text {
        color: white;
        font-weight: 600;
        font-size: 1.8rem;
        margin-bottom: 0.5rem;
        letter-spacing: -0.5px;
    }
    
    .subtitle {
        font-size: 0.95rem;
        opacity: 0.7;
        max-width: 90%;
        margin: 0 auto 1.5rem;
    }
    
    /* Container para inputs com espaçamento melhorado */
    .input-container {
        width: 100%;
        margin-bottom: 5px;
    }
    
    /* Estilo de input simplificado e modernizado */
    ::deep .login-input {
        background-color: rgba(255, 255, 255, 0.06);
        border-color: rgba(255, 255, 255, 0.08);
        border-radius: 12px;
        color: white;
        height: 52px;
        transition: all 0.3s ease;
    }
    
    ::deep .login-input:hover {
        background-color: rgba(255, 255, 255, 0.08);
    }
    
    /* ESTILOS SYNCFUSION CUSTOMIZADOS */
    ::deep .login-input .e-control.e-textbox,
    ::deep .login-input input.e-input,
    ::deep .login-input.e-input-group input.e-input,
    ::deep .login-input.e-float-input.e-input-group input,
    ::deep .login-input .e-float-input.e-input-group input {
        color: #8257E5 !important;
        caret-color: #8257E5 !important;
        font-size: 1rem;
        letter-spacing: 0.3px;
    }
    
    /* Cor do placeholder/label - mantendo a cor original */
    /* Comentado para manter a cor padrão do Syncfusion para os labels */
    /*
    ::deep .login-input .e-float-text,
    ::deep .login-input.e-float-input .e-float-text,
    ::deep .login-input .e-float-input .e-float-text,
    ::deep .login-input.e-float-input .e-label-top {
        color: rgba(130, 87, 229, 0.7) !important;
    }
    */
    
    /* Linha inferior - estado normal */
    ::deep .login-input.e-input-group:not(.e-float-icon-left):not(.e-float-input)::before,
    ::deep .login-input.e-input-group:not(.e-float-icon-left):not(.e-float-input)::after,
    ::deep .login-input.e-input-group .e-float-line::before,
    ::deep .login-input.e-input-group .e-float-line::after,
    ::deep .login-input .e-float-line::before,
    ::deep .login-input .e-float-line::after {
        background-color: #8257E5 !important;
    }
    
    /* Linha inferior - hover */
    ::deep .login-input.e-input-group:hover:not(.e-float-icon-left):not(.e-disabled)::before,
    ::deep .login-input.e-input-group:hover:not(.e-float-icon-left):not(.e-disabled)::after {
        background-color: #8257E5 !important;
    }
    
    /* Linha inferior - focus */
    ::deep .login-input.e-input-group.e-input-focus:not(.e-float-icon-left)::before,
    ::deep .login-input.e-input-group.e-input-focus:not(.e-float-icon-left)::after,
    ::deep .login-input.e-float-input.e-input-focus:not(.e-disabled) .e-float-line::before,
    ::deep .login-input.e-float-input.e-input-focus:not(.e-disabled) .e-float-line::after,
    ::deep .login-input .e-float-input.e-input-focus:not(.e-disabled) .e-float-line::before,
    ::deep .login-input .e-float-input.e-input-focus:not(.e-disabled) .e-float-line::after {
        background-color: #8257E5 !important;
        height: 2px !important;
    }
    
    /* Borda ao focar */
    ::deep .login-input.e-input-group.e-input-focus:not(.e-float-icon-left),
    ::deep .login-input .e-input-group.e-input-focus:not(.e-float-icon-left) {
        border-color: #8257E5 !important;
        box-shadow: 0 0 0 2px rgba(130, 87, 229, 0.25) !important;
        background-color: rgba(255, 255, 255, 0.09);
    }
    
    /* Cor do texto do label em foco */
    ::deep .login-input.e-float-input.e-input-focus:not(.e-disabled) label,
    ::deep .login-input .e-float-input.e-input-focus:not(.e-disabled) label,
    ::deep .login-input.e-float-input.e-input-focus:not(.e-disabled) .e-float-text,
    ::deep .login-input .e-float-input.e-input-focus:not(.e-disabled) .e-float-text {
        color: #8257E5 !important;
    }
    
    /* Botão personalizado com design mais moderno */
    .login-button {
        background-color: #8257E5;
        color: white;
        border: none;
        border-radius: 12px;
        padding: 14px;
        font-weight: 600;
        font-size: 1rem;
        letter-spacing: 0.3px;
        transition: all 0.3s ease;
        width: 100%;
        position: relative;
        overflow: hidden;
        z-index: 1;
    }
    
    .login-button:hover {
        background-color: #9466FF;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(130, 87, 229, 0.4);
    }
    
    .login-button:active {
        transform: translateY(0);
        box-shadow: 0 2px 8px rgba(130, 87, 229, 0.4);
    }
    
    /* Link para recuperação de senha com estilo minimalista */
    .forgot-password-link {
        color: rgba(255, 255, 255, 0.5);
        font-size: 0.9rem;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    
    .forgot-password-link:hover {
        color: #8257E5;
        text-decoration: none;
    }
    
    /* Link para cadastro com destaque */
    .signup-link {
        color: #8257E5;
        font-weight: 600;
        text-decoration: none;
        transition: all 0.3s ease;
        position: relative;
    }
    
    .signup-link:hover {
        color: #9466FF;
    }
    
    .signup-link:after {
        content: '';
        position: absolute;
        width: 0;
        height: 1px;
        bottom: -2px;
        left: 0;
        background-color: #9466FF;
        transition: width 0.3s ease;
    }
    
    .signup-link:hover:after {
        width: 100%;
    }
    
    /* Customizando as alertas que o StatusMessage gera */
    ::deep .alert {
        border-radius: 12px;
        padding: 14px 16px;
        margin-bottom: 0;
        border: none;
        backdrop-filter: blur(10px);
    }
    
    ::deep .alert-danger {
        background-color: rgba(220, 53, 69, 0.15);
        color: #ff6b6b;
        border-left: 3px solid #ff6b6b;
    }
    
    ::deep .alert-success {
        background-color: rgba(40, 167, 69, 0.15);
        color: #51cf66;
        border-left: 3px solid #51cf66;
    }
    
    /* Separador visual mais elegante */
    .account-toggle {
        border-top: 1px solid rgba(255, 255, 255, 0.08);
        padding-top: 20px;
        margin-top: 20px;
        width: 100%;
    }
    
    /* Footer mais discreto */
    .copyright {
        color: rgba(255, 255, 255, 0.4);
        font-size: 0.85rem;
        margin-bottom: 0;
    }
    
    /* Classe para animação de entrada */
    .login-card {
        /* A animação fadeIn está definida no app.css */
        animation: fadeIn 0.6s ease-out;
    }
    
    /* Estilos para o container de senha com botão de visibilidade */
    .password-container {
        position: relative;
        width: 100%;
    }
    
    .password-toggle {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: transparent;
        border: none;
        color: rgba(255, 255, 255, 0.5);
        cursor: pointer;
        padding: 10px;
        font-size: 1rem;
        z-index: 9999; /* Z-index extremamente alto para garantir que fique acima de tudo */
        transition: color 0.3s ease;
        pointer-events: auto;
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
    }
    
    /* Garantindo que o botão seja clicável e tenha espaço suficiente */
    ::deep .password-container .e-input-in-wrap,
    ::deep .password-container .e-input-group,
    ::deep .password-container .e-float-input {
        padding-right: 40px !important;
    }
    
    /* Aumentando a área de clique */
    .password-toggle::before {
        content: '';
        position: absolute;
        top: -5px;
        right: -5px;
        bottom: -5px;
        left: -5px;
        z-index: -1;
    }
    
    .password-toggle:hover {
        color: #8257E5;
    }
    
    .password-toggle:focus {
        outline: none;
    }

</style>

@code {
    private string errorMessage;
    
    // Usando JavaScript interop para manipular o campo de senha diretamente
    private async Task TogglePasswordVisibilityJS()
    {
        // Executar JavaScript para alternar a visibilidade da senha
        await JSRuntime.InvokeVoidAsync("togglePasswordVisibility");
    }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("import", "/js/site.js");
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe,
        lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]

        public string UserName { get; set; } = "";
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
