@page "/Account/Login"
@layout FreelanceManager.Components.Layout.LoginLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FreelanceManager.Data
@using Syncfusion.Blazor.Inputs

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="bg-color-black flex justify-content-center align-items-center w-100 h100vh">
    <div class="signinup-card">
        <div class="text-center mb-16">
            <img src="assets/logo.png" alt="logo freelance manager" class="w-100  border-radius-5" />
        </div>
        <div class="fs-18 fb-bold color-darkgrey text-center mb-16">Login Now!</div>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login"
            class="w-100 flex flex-column gap-10">
            <DataAnnotationsValidator />
            <SfTextBox Placeholder='Username' CssClass="e-outline" @bind-Value="Input.UserName" id="Input.Username"
                FloatLabelType="FloatLabelType.Always">
            </SfTextBox>
            <SfTextBox Placeholder='Password' Type="InputType.Password" CssClass="e-outline"
                FloatLabelType="FloatLabelType.Always" @bind-Value="Input.Password" id="Input.Password">
            </SfTextBox>
            <SfButton Type="submit" CssClass="e-primary" class="w-100">Sign In</SfButton>
            <div class="fs-14">
                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/ForgotPassword", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                    class="fs-14 color-darkgrey fb-bold text-decoration-none">
                    Forgot your password?
                </a>
            </div>
        </EditForm>
        <div class="fs-14 mt-16 text-center">
            Don't have an account? <a class="color-purple fb-bold text-decoration-none"
                href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">SignUp</a>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe,
        lockoutOnFailure:
        false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("home");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
            "Account/LoginWith2fa",
            new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]

        public string UserName { get; set; } = "";
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
