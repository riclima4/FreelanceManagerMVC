@page "/Account/Manage/Index"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using FreelanceManager.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor

<PageTitle>Profile</PageTitle>

<h4 class="mb-4">Profile</h4>
<StatusMessage />

<div class="row">
    <div class="col-xl-4">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@(username ?? "")" id="username" class="form-control"
                    placeholder="Choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <input type="text" value="@(user?.FullName ?? "")" id="fullname" class="form-control" disabled />
                <label for="fullname" class="form-label">Full Name</label>
            </div>
            <div class="form-floating mb-3">
                <SfTextBox Placeholder="Daily Hours" CssClass="e-outline"
                    FloatLabelType="FloatLabelType.Always" @bind-Value="Input.DailyHours" id="Input.DailyHours" />
                <ValidationMessage For="() => Input.DailyHours" class="text-danger small" />
            </div>
            <div class="form-floating mb-3">
                <SfTextBox Placeholder="Phone Number" CssClass="e-outline"
                    FloatLabelType="FloatLabelType.Always" @bind-Value="Input.PhoneNumber" id="Input.PhoneNumber" />
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger small" />
            </div>
            <SfButton Type="submit" CssClass="e-primary w-100">Save</SfButton>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string username;
    private string phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        Console.WriteLine($"Daily hours: {user.DailyHours}");
        Console.WriteLine(user.FullName);
        Input.PhoneNumber ??= phoneNumber;
        Input.DailyHours ??= user.DailyHours;


    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                throw new InvalidOperationException("Failed to update phone number.");
            }
        }
        if (Input.DailyHours != user.DailyHours)
        {
            user.DailyHours = Input.DailyHours;
            var updateResult = await UserManager.UpdateAsync(user);
            if (!updateResult.Succeeded)
            {
                throw new InvalidOperationException("Failed to update daily hours.");
            }
        }
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string PhoneNumber { get; set; }

        [Display(Name = "Daily Hours")]
        [RegularExpression(@"^([0-9]|1[0-9]|2[0-4])$", ErrorMessage = "Daily hours must be between 0 and 24")]
        public string DailyHours { get; set;}

        }
    
}